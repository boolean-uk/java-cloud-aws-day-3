/*
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.booleanuk'
version = '0.0.7'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenLocal()
	mavenCentral()
	maven {url "https://repo.spring.io/milestone"}
	maven {url "https://repo.spring.io/snapshot"}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation('org.springframework.boot:spring-boot-starter-web:3.3.4')
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// https://mvnrepository.com/artifact/com.amazonaws.serverless/aws-serverless-java-container-springboot3
	implementation 'com.amazonaws.serverless:aws-serverless-java-container-springboot3:2.0.3'
}

task buildZip(type: Zip) {
	from compileJava
	from processResources
	into('lib') {
		from(configurations.compileClasspath) {
			exclude 'tomcat-embed-*'
		}
	}
}

build.dependsOn buildZip



plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.booleanuk'
version = '0.0.8'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenLocal()
	mavenCentral()
	maven {url "https://repo.spring.io/milestone"}
		maven {url "https://repo.spring.io/snapshot"}
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation('org.springframework.boot:spring-boot-starter-web') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
	}
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'com.amazonaws.serverless:aws-serverless-java-container-springboot3:2.0.3'
}

tasks.named('test') {
	useJUnitPlatform()
}


task buildZip(type: Zip) {
	from compileJava
	from processResources
	into('lib') {
		from(configurations.compileClasspath) {
			exclude 'tomcat-embed-*'
		}
	}
}

build.dependsOn buildZip

 */

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.booleanuk'
version = '0.0.3'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'com.amazonaws.serverless:aws-serverless-java-container-springboot3:2.0.3'
}

tasks.named('test') {
	useJUnitPlatform()
}

jar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	manifest {
		attributes 'Main-Class': 'com.booleanuk.StreamLambdaHandler'
	}
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

tasks.register('createZip', Zip) {
	dependsOn bootJar
	from compileJava
	from processResources
	from bootJar.archiveFile
	into('lib') {
		from configurations.runtimeClasspath
	}
	archiveFileName = 'backend.zip'
	destinationDirectory = layout.buildDirectory.dir('distributions')
}

build.dependsOn createZip